var documenterSearchIndex = {"docs":
[{"location":"#LSPNeovim.jl","page":"Home","title":"LSPNeovim.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is for interfacing the neovim language server protocol (LSP) client nvim-lsp with the Julia language server LanguageServer.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The LSP provides code analysis capabilities for editors such as auto-completion, jump-to-definition and documentation links.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that this requires at least neovim 0.5.  You can get nightly binaries as a convenient AppImage from here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"NOTE: This package is experimental.  It requires this fork of nvim-lsp to work.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install nvim-lsp.  Once that is done, LSPNeovim can be installed with the command :LspInstall julials.","category":"page"},{"location":"#Requirements:","page":"Home","title":"Requirements:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia 1.4\nNeovim 0.5\nnvim-lsp","category":"page"},{"location":"#init.vim-Example","page":"Home","title":"init.vim Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following is an example of an init.vim using vim-plug.","category":"page"},{"location":"","page":"Home","title":"Home","text":"call plug#begin('~/.config/nvim/plugged')\n\nPlug 'neovim/nvim-lsp'\n\" the below is not required, but currently nvim-lsp is hard to configure without it\nPlug 'haorenW1025/diagnostic-nvim'\n\ncall plug#end()\n\n\" the below is a Lua code block\nlua << EOF\n    local nvim_lsp = require'nvim_lsp'\n    nvim_lsp.julials.setup({on_attach=require'diagnostic'.on_attach})\nEOF\n\" alternatively one can call `nvim_lsp.julials.setup()` above if not using diagnostic-nvim\n\n\" enable completion (requires separate plugin such as deoplete-lsp)\nautocmd Filetype julia setlocal omnifunc=v:lua.vim.lsp.omnifunc","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that you will have to run :LspInstall julials to install LSPNeovim for use with neovim.","category":"page"},{"location":"#Custom-Install","page":"Home","title":"Custom Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LSPNeovim is normally run by nvim-lsp by running Julia in the LSPNeovim environment.  It is possible to explicitly define the Julia command run by nvim-lsp to start the language server.  For example","category":"page"},{"location":"","page":"Home","title":"Home","text":"local nvim_lsp = require'nvim_lsp'\nlocal configs = require'nvim_lsp/configs'\n-- Check if it's already defined for when I reload this file.\nif not nvim_lsp.julials then\n  configs.julials = {\n    default_config = {\n      cmd = {\n              \"julia\", \"--project=/path/to/env\", \"--startup-file=no\", \"--history-file=no\",\n              \"/path/to/runscript\"\n          };\n      filetypes = {'julia'};\n      root_dir = function(fname)\n        return nvim_lsp.util.find_git_ancestor(fname) or vim.loop.os_homedir()\n      end;\n      settings = {};\n    };\n  }\nend\nnvim_lsp.julials.setup{}","category":"page"},{"location":"","page":"Home","title":"Home","text":"(this needs to be run in a lua << EOF ... EOF block as shown above or from a separate script using luafile scriptname.lua or lua require'scriptname') The field cmd in the table above gives the default command for starting the Julia language server where /path/to/env gives the path to the environment the language server runs in (i.e. NOT the environment you want to analyze).  /path/to/runscript is the path to a script for running the language server.  It is recommended that you only use LSPNeovim/bin/run.jl for this, as this script \"bootstraps\" Julia into an environment in which the language server can run.  However, if you wish to install LSPNeovim manually, or through the Julia package manager in your main environment with Pkg.add or Pkg.dev, you will need to modify the above run command to point to your instance of LSPNeovim.","category":"page"},{"location":"#Unobtrusive-Mode","page":"Home","title":"Unobtrusive Mode","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Historically getting all of the features of LanguageServer.jl working has been difficult. If you set all indicators and warnings to be too aggressive, slight breakage can be infuriating.  If you want to get all available features without being molested by broken highlights, you can use diagnostic-nvim and set the following","category":"page"},{"location":"","page":"Home","title":"Home","text":"let g:diagnostic_enable_virtual_text = 0\nlet g:diagnostic_show_sign = 0\nlet g:diagnostic_enable_underline = 0","category":"page"},{"location":"","page":"Home","title":"Home","text":"To use available features on command, you will need to set keys for them, for example","category":"page"},{"location":"","page":"Home","title":"Home","text":"nnoremap <silent> <leader>lg :lua vim.lsp.util.show_line_diagnostics()<CR>\nnnoremap <silent> <leader>lh :lua vim.lsp.buf.hover()<CR>\nnnoremap <silent> <leader>lf :lua vim.lsp.buf.definition()<CR>\nnnoremap <silent> <leader>lr :lua vim.lsp.buf.references()<CR>\nnnoremap <silent> <leader>l0 :lua vim.lsp.buf.document_symbol()<CR>","category":"page"}]
}
